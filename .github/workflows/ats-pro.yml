name: ATS Pro (Strict)

on:
  workflow_run:
    types: [completed]

permissions:
  actions: read
  contents: read
  pull-requests: write
  statuses: write

jobs:
  ats-pro:
    if: >
      github.event.workflow_run.name == 'PR Preview (PDF only)' &&
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Debug: list artifacts from the triggering run
      - name: List artifacts on triggering run (debug)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          OWNER_REPO="${{ github.repository }}"
          RUN_ID="${{ github.event.workflow_run.id }}"
          echo "Artifacts on run ${RUN_ID}:"
          gh api "/repos/${OWNER_REPO}/actions/runs/${RUN_ID}/artifacts" --jq '.artifacts[].name'

      # Download all artifacts from the PR Preview workflow run
      - name: Download all artifacts from preview run
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ github.event.workflow_run.id }}
          path: ./artifacts

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r "main/.github/ats/requirements.txt"
          python -m spacy download en_core_web_sm

      - name: Resolve tool paths & inputs
        id: inputs
        run: |
          set -euo pipefail

          # Look for any PDF in the downloaded artifacts
          PDF_PATH="$(ls -1 artifacts/**/*.pdf 2>/dev/null | head -n1 || true)"
          if [ -z "${PDF_PATH:-}" ]; then
            echo "No PDF found under artifacts/. Contents:"
            find artifacts -maxdepth 3 -type f -print || true
            exit 1
          fi

          echo "Using resume PDF: $PDF_PATH"

          echo "pdf=$PDF_PATH" >> "$GITHUB_OUTPUT"
          echo "jd=jd/job-description.txt" >> "$GITHUB_OUTPUT"
          echo "taxonomy=.github/ats/taxonomy.json" >> "$GITHUB_OUTPUT"
          echo "report=ats-pro-report.json" >> "$GITHUB_OUTPUT"

      - name: Run ATS Pro scoring
        run: |
          set -euo pipefail
          python .github/ats/ats_pro.py \
            --resume "${{ steps.inputs.outputs.pdf }}" \
            --jd "${{ steps.inputs.outputs.jd }}" \
            --taxonomy "${{ steps.inputs.outputs.taxonomy }}" \
            --out "${{ steps.inputs.outputs.report }}"

      - name: Upload ATS report
        uses: actions/upload-artifact@v4
        with:
          name: ats-pro-report
          path: ${{ steps.inputs.outputs.report }}

      - name: Map head SHA â†’ PR number
        id: find_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          SHA="${{ github.event.workflow_run.head_sha }}"
          PR_NUMBER="$(gh api /repos/${{ github.repository }}/commits/$SHA/pulls --jq '.[0].number' || true)"
          if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" = "null" ]; then
            echo "Could not map commit $SHA to a PR." >&2
            exit 1
          fi
          echo "pr=$PR_NUMBER" >> "$GITHUB_OUTPUT"

      - name: Post or update PR comment with ATS results
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          REPORT="${{ steps.inputs.outputs.report }}"
          PR_NUMBER="${{ steps.find_pr.outputs.pr }}"

          if [ ! -f "$REPORT" ]; then
            echo "ATS report not found: $REPORT"
            exit 1
          fi

          BODY="$(cat "$REPORT")"

          # Try to find existing ATS comment
          COMMENT_ID="$(gh api repos/${{ github.repository }}/issues/$PR_NUMBER/comments \
            --jq '.[] | select(.user.login=="github-actions[bot]") | select(.body|startswith("## ATS Nova Report")) | .id' || true)"

          if [ -n "$COMMENT_ID" ]; then
            echo "Updating existing ATS comment ($COMMENT_ID)..."
            gh api repos/${{ github.repository }}/issues/comments/$COMMENT_ID \
              -X PATCH -f body="## ATS Nova Report\n\n$BODY"
          else
            echo "Creating new ATS comment..."
            gh pr comment "$PR_NUMBER" --body "## ATS Nova Report\n\n$BODY"
          fi

      - name: Report status back to PR (status API bridge)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SHA="${{ github.event.workflow_run.head_sha }}"
          gh api repos/${{ github.repository }}/statuses/$SHA \
            -f state=success \
            -f context="ATS Pro (Strict)" \
            -f description="ATS scoring completed"
