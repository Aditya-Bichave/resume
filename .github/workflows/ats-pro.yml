name: ATS Pro (Strict)

on:
  workflow_run:
    workflows: ["PR Preview (PDF only)"]   # must match preview workflow name exactly
    types: [completed]

permissions:
  actions: read            # read artifacts from the triggering run
  contents: write          # ⬅ needed to push to gh-pages
  pull-requests: write     # post/update PR comment
  statuses: write          # commit status (visual check on PR)

env:
  REPORT_JSON: ats-pro-report.json
  REPORT_MD: ats-pro-report.md
  REPORT_HTML: ats-pro-report.html
  ATS_SCRIPT_PATH: .github/ats/ats_pro.py
  ATS_REQS_FILE: .github/ats/requirements.txt
  ATS_TAXONOMY_PATH: .github/ats/taxonomy.json
  MIN_SCORE: "78"
  MIN_REQUIRED_SKILLS_COVERAGE: "0.85"
  SITE_BRANCH: gh-pages

concurrency:
  group: ats-pro-${{ github.event.workflow_run.id }}
  cancel-in-progress: true

jobs:
  ats-pro:
    if: >
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      # --- Check out both branches for tools / overrides ---
      - name: Checkout main (tools/JD fallback)
        uses: actions/checkout@v4
        with:
          ref: main
          path: main

      - name: Checkout PR branch (for ATS overrides)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
          path: pr

      # --- Tooling ---
      - name: Ensure jq and unzip are available
        run: |
          if ! command -v jq >/dev/null 2>&1 || ! command -v unzip >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y jq unzip
          fi

      - name: Resolve ATS requirements path (for cache key)
        id: reqs
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "pr/${{ env.ATS_REQS_FILE }}" ]; then
            echo "path=pr/${{ env.ATS_REQS_FILE }}" >> "$GITHUB_OUTPUT"
          else
            echo "path=main/${{ env.ATS_REQS_FILE }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-atspro-${{ hashFiles(steps.reqs.outputs.path) }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install ATS dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install -r "${{ steps.reqs.outputs.path }}"
          python -m spacy download en_core_web_sm || true

      # --- Status API bridge: pending ---
      - name: Set commit status-pending (ATS Pro)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          SHA="${{ github.event.workflow_run.head_sha }}"
          OWNER_REPO="${{ github.repository }}"
          TARGET_URL="${{ github.server_url }}/${OWNER_REPO}/actions/runs/${{ github.run_id }}"
          gh api -X POST "/repos/${OWNER_REPO}/statuses/${SHA}" \
            -f state="pending" \
            -f context="ATS Pro (Strict)" \
            -f description="Running ATS analysis…" \
            -f target_url="${TARGET_URL}"

      # --- Robust: list & download artifacts from the triggering run ---
      - name: Download artifacts from triggering run
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          OWNER_REPO="${{ github.repository }}"
          RUN_ID="${{ github.event.workflow_run.id }}"
          mkdir -p artifacts

          echo "Listing artifacts for run ${RUN_ID}…"
          ART_JSON="$(gh api "/repos/${OWNER_REPO}/actions/runs/${RUN_ID}/artifacts")"
          COUNT="$(echo "$ART_JSON" | jq '.artifacts | length')"
          echo "Artifacts count: $COUNT"

          if [ "$COUNT" -eq 0 ]; then
            echo "No artifacts found on triggering run ${RUN_ID}"
            exit 1
          fi

          echo "$ART_JSON" | jq -r '.artifacts[] | "\(.id) \(.name)"' | while read -r ID NAME; do
            echo "Downloading artifact id=$ID name=$NAME"
            curl -fsSL \
              -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              -o "artifacts/${NAME}.zip" \
              "${{ github.api_url }}/repos/${OWNER_REPO}/actions/artifacts/${ID}/zip"
            echo "Unzipping ${NAME}.zip"
            mkdir -p "artifacts/${NAME}"
            unzip -q "artifacts/${NAME}.zip" -d "artifacts/${NAME}"
            rm -f "artifacts/${NAME}.zip"
          done

          echo "Artifacts downloaded:"
          find artifacts -maxdepth 3 -type f -print

      # --- Validate / resolve inputs ---
      - name: Validate taxonomy JSON (optional)
        shell: bash
        run: |
          set -euo pipefail
          for p in "pr/${{ env.ATS_TAXONOMY_PATH }}" "main/${{ env.ATS_TAXONOMY_PATH }}"; do
            if [ -f "$p" ]; then jq empty "$p"; break; fi
          done

      - name: Validate JD (non-empty)
        run: |
          set -euo pipefail
          test -s "pr/jd/job-description.txt" || test -s "main/jd/job-description.txt" || { echo "JD is missing/empty"; exit 1; }

      - name: Resolve tool paths & inputs
        id: paths
        shell: bash
        run: |
          set -euo pipefail
          pick() { local p1="pr/$1"; local p2="main/$1"; [[ -f "$p1" ]] && echo "$p1" || echo "$p2"; }
          ATS_SCRIPT="$(pick "${{ env.ATS_SCRIPT_PATH }}")"
          ATS_TAXO="$(pick "${{ env.ATS_TAXONOMY_PATH }}")"
          JD_FILE="pr/jd/job-description.txt"; [[ -f "$JD_FILE" ]] || JD_FILE="main/jd/job-description.txt"

          # Auto-find any PDF under artifacts/**
          PDF_PATH="$(ls -1 artifacts/**/*.pdf 2>/dev/null | head -n1 || true)"
          if [ -z "${PDF_PATH:-}" ]; then
            echo "No PDF found under artifacts/. Contents:"
            find artifacts -maxdepth 3 -type f -print || true
            exit 1
          fi

          echo "ats_script=$ATS_SCRIPT"       >> "$GITHUB_OUTPUT"
          echo "ats_taxonomy=$ATS_TAXO"       >> "$GITHUB_OUTPUT"
          echo "jd_file=$JD_FILE"             >> "$GITHUB_OUTPUT"
          echo "pdf_path=$PDF_PATH"           >> "$GITHUB_OUTPUT"

          echo "Using:"
          echo "  PDF:        $PDF_PATH"
          echo "  ATS script: $ATS_SCRIPT"
          echo "  Taxonomy:   $ATS_TAXO"
          echo "  JD file:    $JD_FILE"

      # --- Resolve PR number from head_sha ---
      - name: Resolve PR number from head_sha (robust)
        id: prnum
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          SHA="${{ github.event.workflow_run.head_sha }}"
          OWNER_REPO="${{ github.repository }}"
          PR_NUM=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/${OWNER_REPO}/commits/${SHA}/pulls \
            --jq '.[0].number')
          if [ -z "${PR_NUM:-}" ] || [ "${PR_NUM}" = "null" ]; then
            echo "No PR found for head_sha=${SHA} in ${OWNER_REPO}" >&2
            exit 1
          fi
          echo "number=${PR_NUM}" >> "$GITHUB_OUTPUT"
          echo "Resolved PR #${PR_NUM} from head_sha=${SHA}"

      - name: Derive MIN_SCORE from labels
        id: gates
        if: steps.prnum.outputs.number
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          PR=${{ steps.prnum.outputs.number }}
          OWNER_REPO="${{ github.repository }}"
          LABELS=$(gh api /repos/${OWNER_REPO}/issues/${PR}/labels --jq '.[].name' | tr '[:upper:]' '[:lower:]' || true)
          if echo "$LABELS" | grep -q '^ats:strict$'; then
            echo "min_score=85" >> "$GITHUB_OUTPUT"
          else
            echo "min_score=${{ env.MIN_SCORE }}" >> "$GITHUB_OUTPUT"
          fi

      # --- ATS run (may exit non-zero if gates fail; we still want the report if created) ---
      - name: Run ATS Pro analysis (non-blocking)
        id: ats
        continue-on-error: true
        shell: bash
        run: |
          set -euo pipefail
          MIN="${{ steps.gates.outputs.min_score && steps.gates.outputs.min_score || env.MIN_SCORE }}"
          python "${{ steps.paths.outputs.ats_script }}" \
            --pdf "${{ steps.paths.outputs.pdf_path }}" \
            --jd "${{ steps.paths.outputs.jd_file }}" \
            --taxonomy "${{ steps.paths.outputs.ats_taxonomy }}" \
            --out-json "${{ env.REPORT_JSON }}" \
            --out-md   "${{ env.REPORT_MD }}" \
            --out-html "${{ env.REPORT_HTML }}" \
            --min-score "${MIN}" \
            --min-req-coverage "${{ env.MIN_REQUIRED_SKILLS_COVERAGE }}"

      - name: Upload report artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ats-pro-report-strict
          path: |
            ${{ env.REPORT_JSON }}
            ${{ env.REPORT_MD }}
            ${{ env.REPORT_HTML }}
          retention-days: 7

      # --- Publish ATS report into the same PR preview folder on gh-pages ---
      - name: Checkout gh-pages
        uses: actions/checkout@v4
        with:
          ref: ${{ env.SITE_BRANCH }}
          path: site
          fetch-depth: 0

      - name: Publish ATS report to preview folder
        id: publish
        if: hashFiles(env.REPORT_JSON) != '' || hashFiles(env.REPORT_HTML) != ''
        shell: bash
        run: |
          set -euo pipefail
          PR="${{ steps.prnum.outputs.number }}"
          PREVIEW_DIR="previews/pr-${PR}"
          mkdir -p "site/${PREVIEW_DIR}"

          # Copy reports
          cp "${{ env.REPORT_JSON }}" "site/${PREVIEW_DIR}/ats-pro-report.json" || true
          cp "${{ env.REPORT_HTML }}" "site/${PREVIEW_DIR}/ats-pro-report.html" || true
          cp "${{ env.REPORT_MD }}"   "site/${PREVIEW_DIR}/ats-pro-report.md" || true

          # Commit/push
          (
            cd site
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add -A
            git commit -m "Publish ATS report for PR #${PR}" || echo "No changes to commit"
            git push origin "${{ env.SITE_BRANCH }}"
          )

          # Build public URLs
          OWNER="${{ github.repository_owner }}"
          REPO="${{ github.event.repository.name }}"
          BASE_URL="https://${OWNER}.github.io/${REPO}/${PREVIEW_DIR}"
          echo "preview_url=${BASE_URL}/" >> "$GITHUB_OUTPUT"
          echo "report_html_url=${BASE_URL}/ats-pro-report.html" >> "$GITHUB_OUTPUT"
          echo "report_json_url=${BASE_URL}/ats-pro-report.json" >> "$GITHUB_OUTPUT"

      # --- Build ATS comment whenever the JSON exists (even if ATS step failed) ---
      - name: Build ATS Nova (Strict) comment
        id: parser
        if: always() && hashFiles(env.REPORT_JSON) != '' && steps.prnum.outputs.number
        shell: bash
        run: |
          set -euo pipefail
          SCORE=$(jq -r '.overall_score // "n/a"' "${{ env.REPORT_JSON }}")
          GATES_PASSED=$(jq -r 'if (.gates | all) then "✅ All Passed" else "❌ Some Failed" end' "${{ env.REPORT_JSON }}")
          SUGGESTIONS=$(jq -r '(.suggestions // []) | .[:6] | map("- " + .) | join("\n")' "${{ env.REPORT_JSON }}")
          [ -z "$SUGGESTIONS" ] && SUGGESTIONS="- (no suggestions emitted)"

          PREVIEW_URL="${{ steps.publish.outputs.preview_url }}"
          REPORT_HTML_URL="${{ steps.publish.outputs.report_html_url }}"
          REPORT_JSON_URL="${{ steps.publish.outputs.report_json_url }}"

          {
            echo 'body<<EOF'
            echo "## ⚡ ATS Nova (Strict Gate)"
            echo ""
            echo "**Score:** **$SCORE / 100**  |  $GATES_PASSED"
            echo ""
            if [ -n "$PREVIEW_URL" ]; then
              echo "[Open Live Preview](${PREVIEW_URL}) · [HTML Report](${REPORT_HTML_URL}) · [JSON](${REPORT_JSON_URL})"
              echo ""
            fi
            echo "### Suggestions"
            echo "$SUGGESTIONS"
            echo ""
            echo "<sub>Posted by <b>ATS Nova</b> 🤖</sub>"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Find prior ATS Nova comment
        id: find-comment
        if: steps.parser.outputs.body && steps.prnum.outputs.number
        uses: peter-evans/find-comment@v3
        with:
          issue-number: ${{ steps.prnum.outputs.number }}
          comment-author: 'github-actions[bot]'
          body-includes: 'ATS Nova (Strict Gate)'

      - name: Create or update PR comment (ATS Nova)
        if: steps.parser.outputs.body && steps.prnum.outputs.number
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ steps.prnum.outputs.number }}
          body: ${{ steps.parser.outputs.body }}
          edit-mode: replace

      - name: Summarize ATS results in job
        if: always() && hashFiles(env.REPORT_JSON) != ''
        run: |
          {
            echo "## ATS Pro Summary"
            echo ""
            echo "- Score: $(jq -r '.overall_score' ats-pro-report.json)/100"
            echo "- Gates: $(jq -r 'if (.gates | all) then "All Passed" else "Some Failed" end' ats-pro-report.json)"
            echo "- Preview: ${{ steps.publish.outputs.preview_url }}"
            echo "- HTML: ${{ steps.publish.outputs.report_html_url }}"
          } >> $GITHUB_STEP_SUMMARY

      # --- Status API bridge: success/failure ---
      - name: Set commit status-success (ATS Pro)
        if: steps.ats.outcome == 'success'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          SHA="${{ github.event.workflow_run.head_sha }}"
          OWNER_REPO="${{ github.repository }}"
          TARGET_URL="${{ github.server_url }}/${OWNER_REPO}/actions/runs/${{ github.run_id }}"
          SCORE=$(jq -r '.overall_score // "n/a"' "${{ env.REPORT_JSON }}" 2>/dev/null || echo "n/a")
          DESC="ATS passed (score: ${SCORE})"
          gh api -X POST "/repos/${OWNER_REPO}/statuses/${SHA}" \
            -f state="success" \
            -f context="ATS Pro (Strict)" \
            -f description="${DESC:0:140}" \
            -f target_url="${TARGET_URL}"

      - name: Set commit status-failure (ATS Pro)
        if: steps.ats.outcome == 'failure'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          SHA="${{ github.event.workflow_run.head_sha }}"
          OWNER_REPO="${{ github.repository }}"
          TARGET_URL="${{ github.server_url }}/${OWNER_REPO}/actions/runs/${{ github.run_id }}"
          gh api -X POST "/repos/${OWNER_REPO}/statuses/${SHA}" \
            -f state="failure" \
            -f context="ATS Pro (Strict)" \
            -f description="ATS failed gates or crashed" \
            -f target_url="${TARGET_URL}"

      - name: Fail the job if analysis failed
        if: steps.ats.outcome == 'failure'
        run: |
          echo "ATS Pro gate/score failed. See PR comment and artifact for details."
          exit 1
