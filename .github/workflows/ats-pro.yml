name: ATS Pro (Strict)

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "resume*.tex"
      - "resume*.pdf"
      - "resume*.cls"
      - ".github/workflows/**"
      # If you also want PRs to rebuild when JD changes *in the PR branch*, uncomment:
      # - "job-description.txt"

permissions:
  contents: read
  pull-requests: write

env:
  ROOT_TEX: resume_faangpath.tex
  REPORT_JSON: ats-pro-report.json
  REPORT_MD: ats-pro-report.md

  # Files that live inside the Pages branch checkout (we detect the branch name below)
  ROLE_FILE: ci/ats-pro/roles/backend-java.json

  # Strictness thresholds (the analyzer exits non-zero if these fail)
  MIN_SCORE: "78"
  MIN_REQUIRED_SKILLS_COVERAGE: "0.85"

concurrency:
  group: ats-pro-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  ats-pro:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR branch (resume source)
        uses: actions/checkout@v4

      # Always read job-description.txt from main
      - name: Checkout main (job-description.txt)
        uses: actions/checkout@v4
        with:
          ref: main
          path: jd
          sparse-checkout: |
            job-description.txt
          sparse-checkout-cone: true

      - name: Build resume PDF
        uses: xu-cheng/latex-action@v3
        with:
          root_file: ${{ env.ROOT_TEX }}
      - name: Resolve filenames
        id: names
        shell: bash
        run: |
          ROOT="${{ env.ROOT_TEX }}"
          BASE="${ROOT%.tex}"
          echo "pdf=${BASE}.pdf" >> "$GITHUB_OUTPUT"
          echo "base=${BASE}" >> "$GITHUB_OUTPUT"

      # Auto-detect which Pages branch exists: gh_pages or gh-pages
      - name: Resolve Pages branch name
        id: pages
        shell: bash
        run: |
          set -e
          if git ls-remote --exit-code --heads origin gh_pages >/dev/null 2>&1; then
            echo "ref=gh_pages" >> "$GITHUB_OUTPUT"
          elif git ls-remote --exit-code --heads origin gh-pages >/dev/null 2>&1; then
            echo "ref=gh-pages" >> "$GITHUB_OUTPUT"
          else
            echo "No Pages branch found (expected 'gh_pages' or 'gh-pages')."
            exit 1
          fi

      # Pull ATS code (script, requirements, roles) from the Pages branch
      - name: Checkout Pages branch (ATS code)
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pages.outputs.ref }}
          path: ops

      - name: Cache pip & HF models
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/huggingface
          key: ${{ runner.os }}-atspro-${{ hashFiles('ops/ci/ats-pro/requirements.txt') }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install ATS dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ops/ci/ats-pro/requirements.txt
          python -c "import nltk; nltk.download('punkt', quiet=True)"

      # Run strict analyzer; allow this step to fail so we can still post the PR comment,
      # then we fail the job at the end based on this step's outcome.
      - name: Run ATS Pro analysis (non-blocking)
        id: ats
        shell: bash
        continue-on-error: true
        run: |
          python ops/ci/ats-pro/ats_pro.py \
            --pdf "${{ steps.names.outputs.pdf }}" \
            --tex "${{ env.ROOT_TEX }}" \
            --jd  "jd/job-description.txt" \
            --role "ops/${{ env.ROLE_FILE }}" \
            --out-json "${{ env.REPORT_JSON }}" \
            --out-md   "${{ env.REPORT_MD }}" \
            --min-score "${{ env.MIN_SCORE }}" \
            --min-req-coverage "${{ env.MIN_REQUIRED_SKILLS_COVERAGE }}"


      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: ats-pro-report
          path: |
            ${{ env.REPORT_JSON }}
            ${{ env.REPORT_MD }}
          retention-days: 7

      - name: Find prior ATS comment
        id: find-comment
        uses: peter-evans/find-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: 'ATS Pro Report (Strict)'

      - name: Create or update PR comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body-path: ${{ env.REPORT_MD }}
          edit-mode: replace
        continue-on-error: true

      - name: Fail the job if analysis failed
        if: steps.ats.outcome == 'failure'
        run: |
          echo "ATS Pro gate/score failed (see PR comment and artifact)."
          exit 1
