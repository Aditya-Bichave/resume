name: ATS Pro (Strict)

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "resume*.tex"
      - "resume*.cls"
      - ".github/workflows/ats-pro.yml"
      - "job-description.txt"

permissions:
  contents: read
  pull-requests: write

env:
  ROOT_TEX: resume_faangpath.tex
  REPORT_JSON: ats-pro-report.json
  ATS_SCRIPT_PATH: .github/ats/ats_pro.py
  ATS_REQS_FILE: .github/ats/requirements.txt
  MIN_SCORE: "78"
  MIN_REQUIRED_SKILLS_COVERAGE: "0.85"

concurrency:
  group: ats-pro-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  ats-pro:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4

      - name: Build resume PDF
        uses: xu-cheng/latex-action@v3
        with:
          root_file: ${{ env.ROOT_TEX }}
      
      # CORRECTED: This step now properly resolves the PDF filename using shell syntax
      - name: Resolve PDF filename
        id: names
        shell: bash
        run: |
          BASE_NAME="${{ env.ROOT_TEX%.tex }}"
          echo "pdf_name=${BASE_NAME}.pdf" >> "$GITHUB_OUTPUT"

      - name: Cache pip & Spacy model
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            /usr/local/lib/python3.10/site-packages/spacy/
          key: ${{ runner.os }}-atspro-v3-${{ hashFiles(env.ATS_REQS_FILE) }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install ATS dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ${{ env.ATS_REQS_FILE }}
          python -m spacy download en_core_web_sm

      - name: Run ATS Pro analysis (non-blocking)
        id: ats
        continue-on-error: true
        run: |
          python ${{ env.ATS_SCRIPT_PATH }} \
            --pdf "${{ steps.names.outputs.pdf_name }}" \
            --jd "job-description.txt" \
            --out-json "${{ env.REPORT_JSON }}" \
            --min-score "${{ env.MIN_SCORE }}" \
            --min-req-coverage "${{ env.MIN_REQUIRED_SKILLS_COVERAGE }}"

      - name: Upload report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ats-pro-report-strict
          path: ${{ env.REPORT_JSON }}
          retention-days: 7

      - name: Parse report for comment
        id: parser
        if: steps.ats.outcome != 'skipped' && steps.ats.conclusion != 'failure'
        run: |
          SCORE=$(jq -r .overall_score ${{ env.REPORT_JSON }})
          GATES_PASSED=$(jq -r 'if (.gates | all) then "✅ All Passed" else "❌ Some Failed" end' ${{ env.REPORT_JSON }})
          SUGGESTIONS=$(jq -r 'if (.suggestions | length > 0) then .suggestions | map("- \(. | gsub("\""; ""))") | join("\n") else "- ✅ Looks good!" end' ${{ env.REPORT_JSON }})
          
          {
            echo 'comment_body<<EOF'
            echo "### ATS Pro Report (Strict Gate)"
            echo "| Score | Gates Status |"
            echo "|:-----:|:------------:|"
            echo "| **$SCORE / 100** | **$GATES_PASSED** |"
            echo ""
            echo "#### Actionable Suggestions"
            echo "$SUGGESTIONS"
            echo ""
            echo "_This is a strict check. See the **PR Preview** for a detailed visual breakdown._"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Find prior ATS comment
        id: find-comment
        uses: peter-evans/find-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: 'ATS Pro Report (Strict Gate)'

      - name: Create or update PR comment
        if: steps.parser.outputs.comment_body
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.parser.outputs.comment_body }}
          edit-mode: replace

      - name: Fail the job if analysis failed
        if: steps.ats.outcome == 'failure'
        run: |
          echo "ATS Pro gate/score failed. See PR comment and artifact for details."
          exit 1