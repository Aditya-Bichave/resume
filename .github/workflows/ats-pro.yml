name: ATS Pro (Strict)

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "resume*.tex"
      - "resume*.cls"
      - ".github/workflows/ats-pro.yml"
      - "job-description.txt"

permissions:
  contents: read
  pull-requests: write

env:
  ROOT_TEX: resume_faangpath.tex
  REPORT_JSON: ats-pro-report.json
  REPORT_MD: ats-pro-report.md
  REPORT_HTML: ats-pro-report.html
  ATS_SCRIPT_PATH: .github/ats/ats_pro.py
  ATS_REQS_FILE: .github/ats/requirements.txt
  MIN_SCORE: "78"
  MIN_REQUIRED_SKILLS_COVERAGE: "0.85"
  ATS_TAXONOMY_PATH: .github/ats/taxonomy.json

concurrency:
  group: ats-pro-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  ats-pro:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch (fallback for ATS deps/tools)
        uses: actions/checkout@v4
        with:
          ref: main
          path: main

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          path: pr

      - name: Build resume PDF
        uses: xu-cheng/latex-action@v3
        with:
          root_file: ${{ env.ROOT_TEX }}
          working_directory: pr

      - name: Resolve PDF filename
        id: names
        shell: bash
        run: |
          BASE_NAME="${ROOT_TEX%.tex}"
          echo "pdf_name=${BASE_NAME}.pdf" >> "$GITHUB_OUTPUT"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-atspro-v3-${{ hashFiles('pr/.github/ats/requirements.txt', 'main/.github/ats/requirements.txt') }}

      - name: Install ATS dependencies
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          REQS="pr/${{ env.ATS_REQS_FILE }}"
          if [ ! -f "$REQS" ]; then
            REQS="main/${{ env.ATS_REQS_FILE }}"
          fi
          echo "Using requirements at: $REQS"
          pip install -r "$REQS"
          python -m spacy download en_core_web_sm

      - name: Run ATS Pro analysis (non-blocking)
        id: ats
        continue-on-error: true
        shell: bash
        run: |
          set -euo pipefail
          ATS="pr/${{ env.ATS_SCRIPT_PATH }}"
          if [ ! -f "$ATS" ]; then
            ATS="main/${{ env.ATS_SCRIPT_PATH }}"
          fi
          if [ ! -f "ATS_TAXONOMY_PATH" ]; then
            ATS_TAXONOMY_PATH="main/${{ env.ATS_TAXONOMY_PATH }}"
          fi
          JD="jd/job-description.txt"
          if [ ! -f "$JD" ]; then
            JD="main/jd/job-description.txt"
          fi
          echo "Using ATS script: $ATS"
          echo "Using JD file:    $JD"
          python "$ATS" \
            --pdf "pr/${{ steps.names.outputs.pdf_name }}" \
            --jd "$JD" \
            --taxonomy "ATS_TAXONOMY_PATH"
            --out-json "${{ env.REPORT_JSON }}" \
            --out-md   "${{ env.REPORT_MD }}" \
            --out-html "${{ env.REPORT_HTML }}" \
            --min-score "${{ env.MIN_SCORE }}" \
            --min-req-coverage "${{ env.MIN_REQUIRED_SKILLS_COVERAGE }}"

      - name: Upload report artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ats-pro-report-strict
          path: |
            ${{ env.REPORT_JSON }}
            ${{ env.REPORT_MD }}
            ${{ env.REPORT_HTML }}
          retention-days: 7

      - name: Build ATS Nova (Strict) comment
        id: parser
        if: steps.ats.outcome == 'success'
        shell: bash
        run: |
          set -euo pipefail
          SCORE=$(jq -r '.overall_score // "n/a"' "${{ env.REPORT_JSON }}")
          GATES_PASSED=$(jq -r 'if (.gates | all) then "‚úÖ All Passed" else "‚ùå Some Failed" end' "${{ env.REPORT_JSON }}")
          SUGGESTIONS=$(jq -r '(.suggestions // []) | .[:6] | map("- " + .) | join("\n")' "${{ env.REPORT_JSON }}")
          if [ -z "$SUGGESTIONS" ]; then SUGGESTIONS="- ‚úÖ Looks good!"; fi

          {
            echo 'comment_body<<EOF'
            echo "## ‚ö° ATS Nova (Strict Gate)"
            echo ""
            echo "| Score | Gates Status |"
            echo "|:-----:|:------------:|"
            echo "| **$SCORE / 100** | **$GATES_PASSED** |"
            echo ""
            echo "### Suggestions"
            echo "$SUGGESTIONS"
            echo ""
            echo "<sub>Posted by <b>ATS Nova</b> ü§ñ</sub>"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Find prior ATS Nova comment
        id: find-comment
        uses: peter-evans/find-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: 'ATS Nova (Strict Gate)'

      - name: Create or update PR comment (ATS Nova)
        if: steps.parser.outputs.comment_body
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.parser.outputs.comment_body }}
          edit-mode: replace

      - name: Fail the job if analysis failed
        if: steps.ats.outcome == 'failure'
        run: |
          echo "ATS Pro gate/score failed. See PR comment and artifact for details."
          exit 1
