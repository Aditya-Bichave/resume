name: Publish main (versions + latest + site meta)

on:
  push:
    branches: [ main ]
    paths:
      - "resume*.tex"
      - "resume*.cls"
      - "job-description.txt"
      - ".github/workflows/publish-main.yml"
  workflow_dispatch:

permissions:
  contents: write

env:
  # --- User Configuration ---
  ROOT_TEX: resume_faangpath.tex
  SITE_BRANCH: gh-pages
  
  # --- Tool Configuration (Centralized in main branch) ---
  ATS_SCRIPT_PATH: .github/ats/ats_pro.py
  ATS_REQS_FILE: .github/ats/requirements.txt

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4

      - name: Build PDF
        uses: xu-cheng/latex-action@v3
        with:
          root_file: ${{ env.ROOT_TEX }}

      - name: Cache pip & Spacy model
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            /usr/local/lib/python3.10/site-packages/spacy/
          key: ${{ runner.os }}-atspro-v3-${{ hashFiles(env.ATS_REQS_FILE) }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install ATS dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ${{ env.ATS_REQS_FILE }}
          python -m spacy download en_core_web_sm

      - name: Run ATS Analysis for publishing
        run: |
          python ${{ env.ATS_SCRIPT_PATH }} \
            --pdf "${{ env.ROOT_TEX%.tex }}.pdf" \
            --jd "job-description.txt" \
            --out-json "ats-pro-report.json"

      - name: Prep assets for publishing
        id: meta
        run: |
          mkdir -p build
          cp "${{ env.ROOT_TEX%.tex }}.pdf" "build/resume.pdf"
          cp "ats-pro-report.json" "build/ats-pro-report.json"
          echo "shortsha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "dateslug=$(date -u +%Y-%m-%d_%H-%M-%S)" >> $GITHUB_OUTPUT

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.SITE_BRANCH }}
          path: site

      - name: Add new version, update latest, and generate gh.json
        run: |
          VERSION_TAG="${{ steps.meta.outputs.dateslug }}-${{ steps.meta.outputs.shortsha }}"
          VERSION_DIR="versions/${VERSION_TAG}"
          mkdir -p "site/${VERSION_DIR}" "site/latest"
          
          # Copy new version files
          cp "build/resume.pdf" "site/${VERSION_DIR}/resume.pdf"
          cp "build/ats-pro-report.json" "site/${VERSION_DIR}/ats-pro-report.json"
          
          # Update the 'latest' symlink/copy for better caching
          rm -f "site/latest/resume.pdf"
          ln -s "../${VERSION_DIR}/resume.pdf" "site/latest/resume.pdf" 2>/dev/null || cp "site/${VERSION_DIR}/resume.pdf" "site/latest/resume.pdf"

          # Build gh.json with historical scores
          (
            cd site
            printf '{ "latest": "%s", "versions": [' "${{ steps.meta.outputs.shortsha }}"
            first=1
            # Loop through version directories in reverse chronological order
            for d in $(ls -1d versions/* 2>/dev/null | sort -r); do
              tag=$(basename "$d")
              score="null" # Default score if report doesn't exist
              if [ -f "$d/ats-pro-report.json" ]; then
                # Safely parse score, default to null on error
                score=$(jq -r .overall_score "$d/ats-pro-report.json" 2>/dev/null || echo "null")
              fi
              if [ $first -eq 0 ]; then printf ', '; fi
              printf '{"tag":"%s", "score":%s}' "$tag" "$score"
              first=0
            done
            printf '] }' > gh.json
          )
          touch site/.nojekyll

      - name: Commit & push to gh-pages
        working-directory: site
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "Publish resume version: ${{ steps.meta.outputs.dateslug }}-${{ steps.meta.outputs.shortsha }}" || echo "No changes to commit"
          git push origin ${{ env.SITE_BRANCH }}